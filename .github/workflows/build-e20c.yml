name: Build ImmortalWrt for E20C

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 180

    steps:
    - name: 1. 检出代码
      uses: actions/checkout@v4

    - name: 2. 准备硬件适配文件
      run: |
        # 创建目录结构
        mkdir -p target/linux/rockchip/files/arch/arm64/boot/dts/rockchip
        
        # 下载瑞莎E20C设备树文件
        wget https://github.com/coolsnowwolf/lede/blob/master/target/linux/rockchip/files/arch/arm64/boot/dts/rockchip/rk3528-radxa-e20c.dts \
          -O target/linux/rockchip/files/arch/arm64/boot/dts/rockchip/rk3528a-e20c.dts
        
        # 添加设备定义
        cat >> target/linux/rockchip/image/armv8.mk << 'EOF'
define Device/rockship_e20c
  DEVICE_VENDOR := Rockship
  DEVICE_MODEL := E20C
  SOC := rk3528a
  DEVICE_DTS := rockchip/rk3528a-e20c
  IMAGE/sysupgrade.img := append-kernel | pad-to 16M | append-rootfs | pad-rootfs
endef
TARGET_DEVICES += rockship_e20c
EOF

    - name: 3. 配置编译环境
      uses: docker/setup-buildx-action@v2

    - name: 4. 开始编译
      run: |
        docker run --rm -it \
          -v $(pwd):/workdir \
          ghcr.io/immortalwrt/sdk:rk35xx-24.10 \
          /bin/bash -c "
            ./scripts/feeds update -a &&
            ./scripts/feeds install -a &&
            make menuconfig <<< $'\n\n\n' &&
            make -j$(nproc) V=s
          "

    - name: 5. 上传固件
      uses: actions/upload-artifact@v4
      with:
        name: immortalwrt-e20c
        path: bin/targets/rockchip/armv8/*.img
